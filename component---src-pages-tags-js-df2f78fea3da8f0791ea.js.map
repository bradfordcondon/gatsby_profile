{"version":3,"sources":["webpack:///./src/pages/tags.js"],"names":["TagsPage","_ref","_ref$data","data","group","allMarkdownRemark","sorted","site","siteMetadata","title","_","reverse","console","log","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_3__","map","tag","key","fieldValue","gatsby__WEBPACK_IMPORTED_MODULE_5__","to","kebabCase","totalCount","propTypes","PropTypes","shape","arrayOf","string","isRequired","number","pageQuery"],"mappings":"+NAWMA,EAAW,SAAAC,GAOX,IAAAC,EAAAD,EANJE,KACuBC,EAKnBF,EALFG,kBAAqBD,MAOrBE,GAFEJ,EAJFK,KACEC,aAAgBC,MAKTC,SAASN,EAAO,cAAcO,WAGzC,OAFFC,QAAQC,IAAIP,GAGVQ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACAH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,UACGV,EAAOY,IAAI,SAAAC,GAAG,OACbL,EAAAC,EAAAC,cAAA,MAAII,IAAKD,EAAIE,YACXP,EAAAC,EAAAC,cAACM,EAAA,KAAD,CAAMC,GAAE,SAAWC,IAAUL,EAAIE,YAAzB,KACLF,EAAIE,WADP,KACqBF,EAAIM,WADzB,aAWZzB,EAAS0B,UAAY,CACnBvB,KAAMwB,IAAUC,MAAM,CACpBvB,kBAAmBsB,IAAUC,MAAM,CACjCxB,MAAOuB,IAAUE,QACfF,IAAUC,MAAM,CACdP,WAAYM,IAAUG,OAAOC,WAC7BN,WAAYE,IAAUK,OAAOD,aAC5BA,cAGPxB,KAAMoB,IAAUC,MAAM,CACpBpB,aAAcmB,IAAUC,MAAM,CAC5BnB,MAAOkB,IAAUG,OAAOC,kBAMjB/B,YAER,IAAMiC,EAAS","file":"component---src-pages-tags-js-df2f78fea3da8f0791ea.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Layout from \"../components/layout\"\n\n// Utilities\nimport kebabCase from \"lodash/kebabCase\"\n// Components\nimport { Link, graphql } from \"gatsby\"\nimport * as _ from \"lodash\"\n\n\nconst TagsPage = ({\n  data: {\n    allMarkdownRemark: { group },\n    site: {\n      siteMetadata: { title },\n    },\n  },\n}) => {\n\nlet sorted = _.sortBy(group, 'totalCount').reverse();\nconsole.log(sorted)\n\n  return (\n  <Layout>\n  <div>\n    <div>\n      <h1>Tags</h1>\n      <ul>\n        {sorted.map(tag => (\n          <li key={tag.fieldValue}>\n            <Link to={`/tags/${kebabCase(tag.fieldValue)}/`}>\n              {tag.fieldValue} ({tag.totalCount})\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n  </Layout>\n)}\n\nTagsPage.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      group: PropTypes.arrayOf(\n        PropTypes.shape({\n          fieldValue: PropTypes.string.isRequired,\n          totalCount: PropTypes.number.isRequired,\n        }).isRequired\n      ),\n    }),\n    site: PropTypes.shape({\n      siteMetadata: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n      }),\n    }),\n  }),\n}\n\nexport default TagsPage\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n    ) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`\n"],"sourceRoot":""}