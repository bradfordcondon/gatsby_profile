{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2018-05-02-tripal_testing_guidelines/","result":{"data":{"markdownRemark":{"html":"<p>This guide is for developers looking to contribute code to the core Tripal project.  It introduces the testing philosophy and guidelines for Tripal core.  Tripal uses Tripal Test Suite, which brings bootstraps your Tripal site for PHPUnit.  It also provides conveniences like namespacing, seeders, transactions, and data factories.</p>\n<p><img src=\"/img/TripalLogo_dark.png\" alt=\"Tripal Logo\"></p>\n<h2>Tripal Test Suite</h2>\n<p>For a basic introduction of Tripal Testing, please see the <a href=\"https://github.com/statonlab/TripalTestSuite\">Test Suite repo</a>.</p>\n<h3>Installation</h3>\n<p>After cloning the <a href=\"https://github.com/tripal/tripal\">Tripal github repo</a>, you will need to install the developer dependencies required to run tests locally.  To do this, you'll need to <a href=\"https://getcomposer.org/doc/00-intro.md\">install Composer</a>, and then execute <code class=\"language-text\">composer install</code> in your project root.</p>\n<h2>Testing criteria</h2>\n<p>For facilitate accepting your pull requests, your code should include tests.  The tests should meet the following guidelines:</p>\n<ul>\n<li>All tests pass</li>\n<li>Tests pass in all environments (Travis)</li>\n<li>Tests don't modify the database (use transactions or clean up after yourself)</li>\n<li>Tests are properly organized (see organization section below)</li>\n<li>Tests run quietly</li>\n</ul>\n<h2>Test organization</h2>\n<p>Tests should be placed in <code class=\"language-text\">tests/</code>.  This root directory contains the following files:</p>\n<ul>\n<li><code class=\"language-text\">bootstrap.php</code> - Test directory configuration.  Don't modify this.</li>\n<li><code class=\"language-text\">DatabasSeeders/</code> - <a href=\"https://github.com/statonlab/TripalTestSuite#database-seeders\">Database seeders</a>, for filling Chado with permanent test data</li>\n<li><code class=\"language-text\">DataFactory.php</code> - <a href=\"https://github.com/statonlab/TripalTestSuite#factories\">Data factories</a>, for providing test-by-test Chado data.</li>\n<li><code class=\"language-text\">example.env</code> - An example environment file.  Configure this to match your development site and save as <code class=\"language-text\">.env</code>.</li>\n</ul>\n<p>Tests must end with <code class=\"language-text\">Test.php</code> to be recognized by PHPUnit.  The tests themselves should be organized by submodule, and category.</p>\n<h5>Submodules</h5>\n<ul>\n<li>tripal</li>\n<li>tripal_bulk_loader</li>\n<li>tripal_chado</li>\n<li>tripal_chado_views</li>\n<li>tripal_daemon</li>\n<li>tripal_ds</li>\n<li>tripal_ws</li>\n</ul>\n<h5>Categories</h5>\n<ul>\n<li>API</li>\n<li>theme</li>\n<li>views</li>\n<li>drush</li>\n<li>fields</li>\n<li>entities</li>\n<li>admin</li>\n</ul>\n<p>So for example, tests for the file <code class=\"language-text\">tripal/api/tripal.jobs.api.inc</code> should go in <code class=\"language-text\">tests/tripal/api/TripalJobsAPITest.php</code>. tests that don't fit in any of these categories should be placed in <code class=\"language-text\">tests/[submodule]/</code>.</p>\n<p>In order for tests to run locally, you'll need an environmental file <code class=\"language-text\">tests/.env</code> with the project root, base url, and locale.  See <code class=\"language-text\">tests/example.env</code> for an example.</p>\n<h2>Writing tests</h2>\n<p>When doing test driven development, you might be running tests over and over.  To speed you along, you can assign your tests a unique <code class=\"language-text\">@group</code> tag, ie <code class=\"language-text\">@group failing</code>.  Then specify your novel group when you run phpunit, ie <code class=\"language-text\">phpunit --group failing</code>.</p>\n<p>You should also tag your test with relevant groups.  For example, our Tripal Chado API tests should be tagged with <code class=\"language-text\">@group api</code>.  We don't tag it with <code class=\"language-text\">@group chado</code> because it is in the <em>testsuite</em> (the submodule folder) Chado.</p>\n<h2>Defining the test class</h2>\n<p>Once you've identified where your test will go, we can start writing our test.</p>\n<p>Tripal Test suite provides a convenient way to start writing a test class: <code class=\"language-text\">tripaltest make:test TestName</code>.  From the project root, our example  <code class=\"language-text\">./vendor/bin/tripaltest make:test tripal_chado/api/TripalChadoOrganismAPITest</code>.  This will generate a test stub file with namespacing.</p>\n<p>The test class file should extend <code class=\"language-text\">StatonLab\\TripalTestSuite\\TripalTestCase</code> instead of <code class=\"language-text\">TestCase</code> to take advantage of the Tripal Test Suite tools.  For example, to wrap our tests in a database transaction (so we can indescriminately insert and modify without having to revert consider how to clean up the database after), we use <code class=\"language-text\">StatonLab\\TripalTestSuite\\DBTransaction;</code>.  Your test class name should match the file.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">StatonLab<span class=\"token punctuation\">\\</span>TripalTestSuite<span class=\"token punctuation\">\\</span>DBTransaction</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">StatonLab<span class=\"token punctuation\">\\</span>TripalTestSuite<span class=\"token punctuation\">\\</span>TripalTestCase</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">TripalChadoOrganismAPITest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TripalTestCase</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">use</span> <span class=\"token package\">DBTransaction</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>You typically will want at least one test per public method in your file or class. In the below test class, I define a single test: <code class=\"language-text\">test_tripal_get_organism()</code>.  The test should start with <code class=\"language-text\">test_</code>, otherwise it wont run by default in PHPUnit (you can also declare that it is a test in the method documentation using <code class=\"language-text\">@test</code>.</p>\n<p>An ideal test operates <em>independently</em> of other tests: by default, unit tests run in random order.  How, then, do we provide our test with relevant data?  We use <strong>Factories</strong>, which you can read about on the <a href=\"https://github.com/statonlab/TripalTestSuite#factories\">Tripal Test Suite repo</a>.  In the below example, we create an organism with known information, and assert that we can retrieve it with the Chado API functions.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\">\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>tripal_chado<span class=\"token punctuation\">\\</span>api</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">StatonLab<span class=\"token punctuation\">\\</span>TripalTestSuite<span class=\"token punctuation\">\\</span>DBTransaction</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">StatonLab<span class=\"token punctuation\">\\</span>TripalTestSuite<span class=\"token punctuation\">\\</span>TripalTestCase</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">TripalChadoOrganismAPITest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TripalTestCase</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">use</span> <span class=\"token package\">DBTransaction</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * Test tripal_get_organism.\n   *\n   * @group api\n   */</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">test_tripal_get_organism</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token variable\">$genus_string</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'a_genius_genus'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$species_string</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'fake_species'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$organism</span> <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'chado.organism'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token string single-quoted-string\">'genus'</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$genus_string</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string single-quoted-string\">'species'</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$species_string</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$results</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$results</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">tripal_get_organism</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'organism_id'</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$organism</span><span class=\"token operator\">-></span><span class=\"token property\">organism_id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$results</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">tripal_get_organism</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token string single-quoted-string\">'genus'</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$genus_string</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string single-quoted-string\">'species'</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$species_string</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$results</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">assertNotFalse</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">assertNotNull</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">assertObjectHasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'genus'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$genus_string</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$result</span><span class=\"token operator\">-></span><span class=\"token property\">genus</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">test_tripal_get_organism_fails_gracefully</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token function\">tripal_get_organism</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token string single-quoted-string\">'genus'</span> <span class=\"token operator\">=></span> <span class=\"token function\">uniqid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string single-quoted-string\">'species'</span> <span class=\"token operator\">=></span> <span class=\"token function\">uniqid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">assertNull</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Testing quietly</h3>\n<p>Code may output errors when failing intentionally, or as part of job progress.  This can clutter the test environment, so you should wrap the offending methods.  If the output goes to standard out, you can use <code class=\"language-text\">ob_start()</code> and <code class=\"language-text\">ob_end_clean()</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\">\n    <span class=\"token function\">ob_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//dont display the job message</span>\n    <span class=\"token variable\">$bool</span> <span class=\"token operator\">=</span> <span class=\"token function\">tripal_chado_publish_records</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$values</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ob_end_clean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>If the message comes from the Tripal error reporter, you must use <code class=\"language-text\">\"TRIPAL_SUPPRESS_ERRORS=TRUE\"</code> to suppress the tripal error reporter message.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\">\n  <span class=\"token comment\">/**\n   * Test chado_publish_records returns false given bad bundle.\n   *\n   * @group api\n   */</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">test_tripal_chado_publish_records_false_with_bad_bundle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">putenv</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"TRIPAL_SUPPRESS_ERRORS=TRUE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//this will fail, so we suppress the tripal error reporter</span>\n    <span class=\"token variable\">$bool</span> <span class=\"token operator\">=</span> <span class=\"token function\">tripal_chado_publish_records</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'bundle_name'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'never_in_a_million_years'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">assertFalse</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">putenv</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"TRIPAL_SUPPRESS_ERRORS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//unset</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Testing Entities and Fields</h3>\n<p>Coming soon.</p>","frontmatter":{"title":"Testing in Tripal Core"}}},"pageContext":{"slug":"/2018-05-02-tripal_testing_guidelines/"}},"staticQueryHashes":["2744294623","3649515864"],"slicesMap":{}}