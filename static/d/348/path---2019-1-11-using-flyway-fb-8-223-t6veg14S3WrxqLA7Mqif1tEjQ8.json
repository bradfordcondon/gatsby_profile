{"data":{"markdownRemark":{"html":"<p>Changes are coming to Chado!  We're moving to the popular schema management system <a href=\"https://flywaydb.org/getstarted/\">Flyway</a>!  </p>\n<p>I'm providing two guides here: one for running flyway yourself (on your live or development instance), and one describing what the Travis CI setup is doing.</p>\n<h3>Developer and Deployment</h3>\n<p>I strongly recommend reading the <a href=\"https://flywaydb.org/getstarted/\">Flyway getting started guide</a> to understand the basics of migrations before getting started.</p>\n<h4>Installing and configuring flyway</h4>\n<p>There are multiple ways to install Flyway: this guide will cover the command line tool, and we'll use the Gradle method for Travis below.</p>\n<p>First, follow the (instructions)[https://flywaydb.org/getstarted/firststeps/commandline] for downloading the appropriate command line tool for your system.  We'll also want a local copy of the Chado github repo: run <code class=\"language-text\">git clone https://github.com/GMOD/Chado.git</code> in an appropriate location.</p>\n<p>Once the tool is installed, we need a <code class=\"language-text\">flyway.conf</code> file in our home directory which describes our postgresql database and the location of our Chado migrations.</p>\n<p>My developer configuration file is below:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">flyway.url=jdbc:postgresql://localhost:5432/drupal\nflyway.user=drupal\nflyway.password=secret\nflyway.schemas=chado\nflyway.locations=filesystem:/Users/bc/general_work/Chado_SQL/chado/migrations\nflyway.validateOnMigrate=false</code></pre></div>\n<p>The url, user, password, and schema parameters all define our PostgreSQL server.  Note you might have to the url to point to whatever your db name and url is (my db name is Drupal. for example).  The locations parameter points to the <code class=\"language-text\">migrations</code> folder in the Chado repository, so update that path to wherever you cloned the repo.  The <code class=\"language-text\">validateOnMigrate</code> option allows Flyway to run migrations even if previously run migrations aren't present- I wouldn't recommend this option for live sites.  For development sites, I found myself writing multiple pull requests with different migrations: when i switch branches and the previously run migrations go away, it would cause errors without this option.</p>\n<p>There are a lot of other options one can configure: <a href=\"https://flywaydb.org/documentation/command/migrate\">look at the migration documentation online</a>.</p>\n<p>Once flyway is configured, running <code class=\"language-text\">flyway info</code> should tell us we have an empty schema with pending migrations. If we are running this on an <a href=\"https://flywaydb.org/documentation/existing\">existing</a> Chado schema, we just need to run <code class=\"language-text\">flyway baseline</code> to tell Chado that this is our \"starting point\".  Then we run <code class=\"language-text\">flyway migrate</code>, and all migrations in the SQL folder will be run in order.</p>\n<p>If installing Chado on a new Postgres instance, you'll just want to run the latest SQL script in <code class=\"language-text\">chado/schemas/</code> and set that as baseline.</p>\n<p>Below are the results of running flyway info and migrate on a correctly configured site.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">flyway info\nFlyway Community Edition 5.2.4 by Boxfuse\nDatabase: jdbc:postgresql://localhost:5432/drupal (PostgreSQL 10.5)\nSchema version: 1\n\n+-----------+---------+-----------------------+----------+---------------------+----------+\n| Category  | Version | Description           | Type     | Installed On        | State    |\n+-----------+---------+-----------------------+----------+---------------------+----------+\n|           | 1       | &lt;&lt; Flyway Baseline &gt;&gt; | BASELINE | 2018-12-20 14:31:32 | Baseline |\n| Versioned | 1.1     | try1                  | SQL      |                     | Pending  |\n+-----------+---------+-----------------------+----------+---------------------+----------+\n\n________________________________________________________________________________\n| bc:~/tripal/sites/all/modules/custom/tripal_eutils/db/migrations (new_chado_tables)$\n| =&gt; flyway migrate\nFlyway Community Edition 5.2.4 by Boxfuse\nDatabase: jdbc:postgresql://localhost:5432/drupal (PostgreSQL 10.5)\nSuccessfully validated 2 migrations (execution time 00:00.596s)\nCurrent version of schema &quot;public&quot;: 1\nMigrating schema &quot;public&quot; to version 1.1 - try1\nSuccessfully applied 1 migration to schema &quot;public&quot; (execution time 00:00.013s)\n________________________________________________________________________________\n| bc:~/tripal/sites/all/modules/custom/tripal_eutils/db/migrations (new_chado_tables)$\n| =&gt; flyway info\nFlyway Community Edition 5.2.4 by Boxfuse\nDatabase: jdbc:postgresql://localhost:5432/drupal (PostgreSQL 10.5)\nSchema version: 1.1\n\n+-----------+---------+-----------------------+----------+---------------------+----------+\n| Category  | Version | Description           | Type     | Installed On        | State    |\n+-----------+---------+-----------------------+----------+---------------------+----------+\n|           | 1       | &lt;&lt; Flyway Baseline &gt;&gt; | BASELINE | 2018-12-20 14:31:32 | Baseline |\n| Versioned | 1.1     | try1                  | SQL      | 2018-12-20 14:36:57 | Success  |\n+-----------+---------+-----------------------+----------+---------------------+----------+\n\n________________________________________________________________________________</code></pre></div>\n<h3>Travis integration with Flyway</h3>\n<p>We use <a href=\"https://travis-ci.org/\">Travis CI</a> to run all migrations on each new pull request.  This ensures that no syntax errors or naming problems are present in newly proposed migrations.  The Travis environment uses Gradle to deal with installing Flyway.</p>\n<p>This is the <code class=\"language-text\">build.gradle</code> file included in the repository for Travis purpose.  You could adapt it for your own use instead of using the command line application by updating the URL and schema locations as appropriate.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">buildscript {\n dependencies {\n classpath &#39;org.postgresql:postgresql:42.2.5&#39;\n }\n}\nplugins {\n  id &quot;org.flywaydb.flyway&quot; version &quot;5.2.4&quot;\n}\ntask assemble{}\n\nflyway {\n  url = &quot;jdbc:postgresql://127.0.0.1:5432/postgres&quot;\n  user = &#39;postgres&#39;\n  locations = [&#39;filesystem:chado/migrations/&#39;]\n}</code></pre></div>\n<p>The Travis script itself is quite simple: it just runs <code class=\"language-text\">flyway info</code>, <code class=\"language-text\">flyway migrate</code>, and <code class=\"language-text\">flyway info</code> on the empty Chado 1.3 release.  This will demonstrate what scripts were found, and if any issues arose during migration.</p>","frontmatter":{"title":"Flyway"}}},"pageContext":{"slug":"/2019-1-11_using_flyway/"}}