{"data":{"markdownRemark":{"html":"<p>One of the greatest joys of programming is saving people time.  I recently ran into a problem where quicktime movies exported as <code class=\"language-text\">.mov</code> from OSX Catalina were not opening on a OSX yosemite.  I found that exporting as <code class=\"language-text\">.mp4</code> in quicktime wasn't sufficient, but doing so in iMovie worked.</p>\n<p>While the 100 or so clips could have been <a href=\"https://www.addictivetips.com/mac-os/convert-mov-file-to-mp4-on-macos/\">manually converted and exported in iMovie</a>, the process would have been tedious.  This is the spark of books like <a href=\"https://automatetheboringstuff.com/\">Automate the Boring Stuff</a>: if you face a task that boils down to \"do something over and over\", you can probably automate it!</p>\n<h3>Setup</h3>\n<p>I went with <a href=\"http://ffmpeg.org/download.html\">FFmpeg</a> to convert the files using the command line.  On OSX I would recommend installing with homebrew (<code class=\"language-text\">brew install ffmpeg</code>).</p>\n<p>I copied all movie files to a separate folder and toyed with different conversion codecs.  You can inspect the file and view the audio and video codecs in play, so its simply a matter of determining what codecs will work on both systems.  In my case, the videos wouldnt play with <code class=\"language-text\">HEVC</code> encoding, and I needed to specify <code class=\"language-text\">libx264</code> for the output video Codec.</p>\n<p>I wrote the following bash script to convert all files in the folder with a <code class=\"language-text\">.MOV</code> extension.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> *.MOV<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">[</span> -f <span class=\"token string\">\"<span class=\"token variable\">$i</span>\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">break</span>\n    ffmpeg -i <span class=\"token variable\">$i</span>  -c:v libx264 -c:a aac <span class=\"token string\">\"<span class=\"token variable\">${i%.*}</span>.mp4\"</span>\n<span class=\"token keyword\">done</span></code></pre></div>\n<p>I hope this information can help you!</p>","frontmatter":{"title":"Converting Video Files"}}},"pageContext":{"slug":"/2020-07-24_video_codec_conversion/"}}