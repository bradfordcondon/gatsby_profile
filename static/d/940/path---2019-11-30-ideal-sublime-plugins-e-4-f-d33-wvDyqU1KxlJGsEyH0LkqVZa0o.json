{"data":{"markdownRemark":{"html":"<h1>Plugins</h1>\n<ul>\n<li><a href=\"https://packagecontrol.io/packages/CodeFormatter\">CodeFormatter</a></li>\n</ul>\n<p>Ideally, all members of the team will have the same automatic styling, reducing whitespace changes and churn in the codebase.  If I'm working in a legacy codebase, or on a team where we can't standardize code formatting, I'll turn off automatic styling. For my own files I'll run the formatter, but for minor changes to other people's code, I wont restyle their work.</p>\n<p>If you find lots of white space changes being committed, I recommend separating out the whitespace changes into their own commit by running the formatter first as your first commit.  This keeps the style changes separate from code changes.</p>\n<h2>Javascript</h2>\n<p><a href=\"https://github.com/jonlabelle/SublimeJsPrettier\">JSPrettier</a></p>\n<h2>PHP</h2>\n<h3></h3>\n<p><a href=\"https://packagecontrol.io/packages/CodeFormatter\">CodeFormatter</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"codeformatter_php_options\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"syntaxes\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"php\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Syntax names which must process PHP formatter</span>\n        <span class=\"token string\">\"php_path\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/usr/bin/php\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Path for PHP executable, e.g. \"/usr/lib/php\" or \"C:/Program Files/PHP/php.exe\". If empty, uses command \"php\" from system environments</span>\n        <span class=\"token string\">\"format_on_save\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Format on save</span>\n        <span class=\"token string\">\"php55_compat\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// PHP 5.5 compatible mode</span>\n        <span class=\"token string\">\"psr1\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Activate PSR1 style</span>\n        <span class=\"token string\">\"psr1_naming\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Activate PSR1 style - Section 3 and 4.3 - Class and method names case</span>\n        <span class=\"token string\">\"psr2\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Activate PSR2 style</span>\n        <span class=\"token string\">\"indent_with_space\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Use spaces instead of tabs for indentation</span>\n        <span class=\"token string\">\"enable_auto_align\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Enable auto align of = and =></span>\n        <span class=\"token string\">\"visibility_order\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Fixes visibility order for method in classes - PSR-2 4.2</span>\n        <span class=\"token string\">\"smart_linebreak_after_curly\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Convert multistatement blocks into multiline blocks</span>\n\n        <span class=\"token comment\">// Enable specific transformations. Example: [\"ConvertOpenTagWithEcho\", \"PrettyPrintDocBlocks\"]</span>\n        <span class=\"token comment\">// You can list all available transformations from command palette: CodeFormatter: Show PHP Transformations</span>\n        <span class=\"token string\">\"passes\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">\"OnlyOrderUseClauses\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"AllmanStyleBraces\"</span><span class=\"token punctuation\">,</span>\n         <span class=\"token string\">\"ClassToSelf\"</span><span class=\"token punctuation\">,</span>\n         <span class=\"token string\">\"AutoSemicolon\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"JoinToImplode\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"ShortArray\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// [] vs array()</span>\n          <span class=\"token string\">\"SplitElseIf\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"RemoveSemicolonAfterCurly\"</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string\">\"ReplaceIsNull\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">// \"SpaceAroundExclamationMark\",</span>\n           <span class=\"token string\">\"SpaceBetweenMethods\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">//\"StrictComparison\",</span>\n             <span class=\"token string\">\"StripNewlineAfterCurlyOpen\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"StripNewlineAfterClassOpen\"</span><span class=\"token punctuation\">,</span>\n             <span class=\"token string\">\"StripSpaceWithinControlStructures\"</span><span class=\"token punctuation\">,</span>\n             <span class=\"token string\">\"UpgradeToPreg\"</span><span class=\"token punctuation\">,</span>\n              <span class=\"token string\">\"WrongConstructorName\"</span><span class=\"token punctuation\">,</span>\n               <span class=\"token string\">\"TightConcat\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token comment\">// Disable specific transformations</span>\n        <span class=\"token string\">\"exclude\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"PSR2IndentWithSpace\"</span><span class=\"token punctuation\">,</span>\n         <span class=\"token string\">\"OrderAndRemoveUseClauses\"</span><span class=\"token punctuation\">,</span>\n         <span class=\"token string\">\"YodaComparisons\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Sublime Text developer plugins"}}},"pageContext":{"slug":"/2019-11-30_ideal_sublime_plugins/"}}