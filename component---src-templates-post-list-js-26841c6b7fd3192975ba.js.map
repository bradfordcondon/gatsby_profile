{"version":3,"sources":["webpack:///./src/templates/post-list.js"],"names":["PostList","render","console","log","this","props","data","colorBadge","drupal","tripal","documentation","chado","databases","bioinformatics","web-dev","travis-ci","d3","mysql","_this$props$pageConte","pageContext","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_9__","reactstrap__WEBPACK_IMPORTED_MODULE_10__","md","className","style","maxWidth","margin","src","alt","allMarkdownRemark","edges","map","_ref","node","key","id","gatsby__WEBPACK_IMPORTED_MODULE_8__","to","fields","slug","textDecoration","color","frontmatter","title","date","tags","name","index","excerpt","href","rel","Array","from","length","_","i","Component","pagesQuery"],"mappings":"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","file":"component---src-templates-post-list-js-26841c6b7fd3192975ba.js","sourcesContent":["import React, { Component } from \"react\"\nimport {css} from \"react-emotion\"\nimport {Link, graphql} from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport {\n  Badge,\n  Col,\n  Row,\n  Card,\n  CardImg,\n  CardTitle,\n  CardBody,\n  CardSubtitle,\n  CardText,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\";\n\n\nexport default class PostList extends Component {\n  render(){\n    console.log(this.props)\n\n//export default(page) => {\n//  const data = page.data\nconst data = this.props.data\n  const colorBadge = {\n    'drupal': \"primary\",\n    'tripal': \"success\",\n    'documentation': \"danger\",\n    'chado': 'info',\n    'databases': 'primary',\n    'bioinformatics': 'light',\n    'web-dev': 'warning',\n    'travis-ci': 'dark',\n    'd3': 'success',\n    'mysql': \"info\"\n  }\n  //Page location\n const { currentPage, numPages } = this.props.pageContext\n const isFirst = currentPage === 0\n const isLast = currentPage === numPages\n const prevPage = currentPage - 1 === 0 ? \"/\" : (currentPage - 1).toString()\n const nextPage = (currentPage + 1).toString()\n\n  return (<Layout>\n    <Row>\n      <Col md=\"3\">\n        <Card className={'mb-4'}>\n          <CardImg style={{\n              maxWidth: 250,\n              margin: '0 auto'\n            }} src=\"/img/condon_face.jpg\" alt=\"Bradford Condon PhD\"/>\n          <CardBody>\n            <CardText>Hello! I am a full stack web/mobile developer, data scientist, and bionformatician.</CardText>\n            <CardText>If you're looking for\n              <b>Tripal</b>\n              help, you're in the right place.</CardText>\n          </CardBody>\n        </Card>\n      </Col>\n\n      <Col md=\"9\">\n        {\n          data.allMarkdownRemark.edges.map(({node}) => (<Card className={\"mb-4\"} key={node.id}>\n            <Link to={node.fields.slug} style={{\n                textDecoration: 'none',\n                color: 'inherit'\n              }}>\n              <div className=\"card-header px-3\">\n                {node.frontmatter.title}\n              </div>\n              <div className=\"p-3\">\n                <div className={'mb-2'} style={{\n                    color: '#bbb'\n                  }}>\n                  <span className=\"mr-2\">{node.frontmatter.date}</span>\n                  <div className={'float-right'}>\n                    {\n                      node.frontmatter.tags\n                        ? node.frontmatter.tags.map(function(name, index) {\n\n                          let color = colorBadge[name]\n                            ? colorBadge[name]\n                            : \"secondary\"\n\n                          return (<Badge key={index} style={{\n                              margin: '0 2px'\n                            }} color={color}>\n                            {name}\n                          </Badge>)\n                        })\n                        : ''\n                    }\n                  </div>\n                </div>\n                <div className=\"card-text\">\n                  <p>{node.excerpt}</p>\n                </div>\n              </div>\n            </Link>\n          </Card>))\n        }\n        <Nav>\n        {!isFirst && (\n          <NavItem>\n            <NavLink href={`/blog/${prevPage}`} rel=\"prev\">\n              ← Previous Page\n            </NavLink>\n            </NavItem>\n          )}\n          {Array.from({ length: numPages }, (_, i) => (\n<NavItem>\n            <NavLink href={`pagination-number${i}`} to={`blog/${i === 0 ? \"\" : i}`}>\n              {i + 1}\n            </NavLink>\n            </NavItem>\n          ))}\n\n          {!isLast && (\n            <NavItem>\n            <NavLink href={`/blog/${nextPage}`} rel=\"next\">\n              Next Page →\n            </NavLink>\n            </NavItem>\n          )}\n        </Nav>\n      </Col>\n    </Row>\n  </Layout>)\n}\n}\n\nexport const pagesQuery = graphql `\n  query pagesQuery ($skip: Int!, $limit: Int!){\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n            tags\n          }\n          fields {\n            slug\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}