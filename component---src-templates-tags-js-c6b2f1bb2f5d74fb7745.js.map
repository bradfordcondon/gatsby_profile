{"version":3,"sources":["webpack:///./src/templates/tags.js"],"names":["Tags","pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader","map","node","title","frontmatter","slug","fields","key","to","pageQuery"],"mappings":"4FAAA,kGA0DeA,UAnDF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACnBC,EAAQF,EAARE,IAD8B,EAERD,EAAKE,kBAA3BC,EAF8B,EAE9BA,MAAOC,EAFuB,EAEvBA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAIf,OACE,kBAAC,IAAD,KACE,6BACE,4BAAKI,GACL,4BACGF,EAAMG,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNC,EAAQD,EAAKE,YAAYD,MACzBE,EAAOH,EAAKI,OAAOD,KACzB,OACE,wBAAIE,IAAKF,GACP,kBAAC,OAAD,CAAMG,GAAIH,GAAOF,QASzB,kBAAC,OAAD,CAAMK,GAAG,SAAT,eA2BD,IAAMC,EAAS","file":"component---src-templates-tags-js-c6b2f1bb2f5d74fb7745.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport Layout from '../components/layout'\n\n// Components\nimport { Link, graphql } from 'gatsby'\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? '' : 's'\n  } tagged with \"${tag}\"`\n\n  return (\n    <Layout>\n      <div>\n        <h2>{tagHeader}</h2>\n        <ul>\n          {edges.map(({ node }) => {\n            const title = node.frontmatter.title\n            const slug = node.fields.slug\n            return (\n              <li key={slug}>\n                <Link to={slug}>{title}</Link>\n              </li>\n            )\n          })}\n        </ul>\n        {/*\n              This links to a page that does not yet exist.\n              We'll come back to it!\n            */}\n        <Link to=\"/tags\">All tags</Link>\n      </div>\n    </Layout>\n  )\n}\n\nTags.propTypes = {\n  pathContext: PropTypes.shape({ tag: PropTypes.string.isRequired }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              path: PropTypes.string.isRequired,\n              title: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          frontmatter {\n            title\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}