{"version":3,"sources":["webpack:///./src/templates/tags.js"],"names":["Tags","_ref","pageContext","data","tag","_data$allMarkdownRema","allMarkdownRemark","edges","totalCount","tagHeader","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_3__","map","_ref2","node","title","frontmatter","slug","fields","key","gatsby__WEBPACK_IMPORTED_MODULE_4__","to","propTypes","pathContext","PropTypes","shape","string","isRequired","number","arrayOf","path","pageQuery"],"mappings":"qMAOMA,EAAO,SAAAC,GAAyB,IAAvBC,EAAuBD,EAAvBC,YAAaC,EAAUF,EAAVE,KACnBC,EAAOF,EAAPE,IAD6BC,EAERF,EAAKG,kBAA1BC,EAF6BF,EAE7BE,MAAOC,EAFsBH,EAEtBG,WACRC,EAAeD,EAAN,SACA,IAAfA,EACI,GACA,KAHW,iBAGSJ,EAHT,IAKf,OACEM,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACAH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKH,GACLC,EAAAC,EAAAC,cAAA,UAEIL,EAAMO,IAAI,SAAAC,GAAY,IAAVC,EAAUD,EAAVC,KACJC,EAAQD,EAAKE,YAAYD,MACzBE,EAAOH,EAAKI,OAAOD,KACzB,OAAQT,EAAAC,EAAAC,cAAA,MAAIS,IAAKF,GACfT,EAAAC,EAAAC,cAACU,EAAA,KAAD,CAAMC,GAAIJ,GAAOF,OAUzBP,EAAAC,EAAAC,cAACU,EAAA,KAAD,CAAMC,GAAG,SAAT,eAKNvB,EAAKwB,UAAY,CACfC,YAAaC,IAAUC,MAAM,CAACvB,IAAKsB,IAAUE,OAAOC,aACpD1B,KAAMuB,IAAUC,MAAM,CACpBrB,kBAAmBoB,IAAUC,MAAM,CACjCnB,WAAYkB,IAAUI,OAAOD,WAC7BtB,MAAOmB,IAAUK,QAAQL,IAAUC,MAAM,CACvCX,KAAMU,IAAUC,MAAM,CACpBT,YAAaQ,IAAUC,MAAM,CAACK,KAAMN,IAAUE,OAAOC,WAAYZ,MAAOS,IAAUE,OAAOC,iBAE1FA,iBAKM7B,YAER,IAAMiC,EAAS","file":"component---src-templates-tags-js-95ad715bb844b52496ad.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Layout from \"../components/layout\"\n\n// Components\nimport {Link, graphql} from \"gatsby\"\n\nconst Tags = ({pageContext, data}) => {\n  const {tag} = pageContext\n  const {edges, totalCount} = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n  totalCount === 1\n    ? \"\"\n    : \"s\"} tagged with \"${tag}\"`\n\n  return (\n    <Layout>\n    <div>\n      <h2>{tagHeader}</h2>\n      <ul>\n        {\n          edges.map(({node}) => {\n            const title = node.frontmatter.title\n            const slug = node.fields.slug\n            return (<li key={slug}>\n              <Link to={slug}>{title}</Link>\n            </li>)\n          })\n        }\n      </ul>\n      {/*\n              This links to a page that does not yet exist.\n              We'll come back to it!\n            */\n      }\n      <Link to=\"/tags\">All tags</Link>\n    </div>\n  </Layout>)\n}\n\nTags.propTypes = {\n  pathContext: PropTypes.shape({tag: PropTypes.string.isRequired}),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(PropTypes.shape({\n        node: PropTypes.shape({\n          frontmatter: PropTypes.shape({path: PropTypes.string.isRequired, title: PropTypes.string.isRequired})\n        })\n      }).isRequired)\n    })\n  })\n}\n\nexport default Tags\n\nexport const pageQuery = graphql `\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          frontmatter {\n            title\n          },\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}